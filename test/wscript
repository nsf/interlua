from waflib import Logs
def summary(bld):
	lst = getattr(bld, 'utest_results', [])
	if lst:
		Logs.pprint('CYAN', 'execution summary')

		total = len(lst)
		tfail = len([x for x in lst if x[1]])

		Logs.pprint('CYAN', '  tests that pass %d/%d' % (total-tfail, total))
		for (f, code, out, err) in lst:
			if not code:
				Logs.pprint('CYAN', '    %s' % f)
				Logs.pprint('NORMAL', '%s' % err[:-1].decode('utf-8'))

		Logs.pprint('CYAN', '  tests that fail %d/%d' % (tfail, total))
		for (f, code, out, err) in lst:
			if code:
				Logs.pprint('CYAN', '    %s' % f)
				Logs.pprint('NORMAL', '%s' % err[:-1].decode('utf-8'))


def build(bld):
	tests = bld.path.ant_glob("*.cc")
	for l in bld.luas:
		for t in tests:
			bld.program(
				features = 'test',
				source = [t],
				target = l.uselib.lower() + '_test_' + t.name[:-3],
				includes = '..',
				install_path = None,
				use = [l.uselib, 'interlua_' + l.uselib.lower()],
			)

	bld.add_post_fun(summary)
	from waflib.Tools import waf_unit_test
	bld.add_post_fun(waf_unit_test.set_exit_code)
